PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS t_File ( id INTEGER PRIMARY KEY, path TEXT NOT NULL UNIQUE, etag TEXT ); CREATE TABLE IF NOT EXISTS t_FileContent ( id INTEGER, ix INTEGER, data BLOB, PRIMARY KEY (id, ix), FOREIGN KEY (id) REFERENCES t_File(id) ); DROP VIEW IF EXISTS vw_File; CREATE VIEW vw_File (path, etag) AS SELECT path, etag FROM t_File; DROP VIEW IF EXISTS vw_FileContent; CREATE VIEW vw_FileContent (path, ix, data) AS SELECT f.path, c.ix, c.data FROM t_File f JOIN t_FileContent c ON f.id = c.id ORDER BY f.path, c.ix; DROP VIEW IF EXISTS sp_removeFile; CREATE VIEW sp_removeFile(path) AS SELECT 0 WHERE 0; CREATE TRIGGER sp_removeFile_t INSTEAD OF INSERT ON sp_removeFile BEGIN DELETE FROM t_FileContent WHERE id IN ( SELECT id FROM t_File WHERE path = NEW.path ); DELETE FROM t_File WHERE path = NEW.path; END; DROP VIEW IF EXISTS sp_addFilePart; CREATE VIEW sp_addFilePart(path, data) AS SELECT 0, 0 WHERE 0; CREATE TRIGGER sp_addFilePart_t INSTEAD OF INSERT ON sp_addFilePart BEGIN INSERT OR IGNORE INTO t_File (path) VALUES (NEW.path); UPDATE t_File SET etag = \'updating\' WHERE path = NEW.path AND etag IS NOT \'updating\'; INSERT INTO t_FileContent (id, ix, data) SELECT f.id, 1 + IFNULL(MAX(c.ix), 0), NEW.data FROM t_file f LEFT JOIN t_FileContent c ON c.id = f.id WHERE f.path = NEW.path; END; DROP VIEW IF EXISTS sp_updateFile; CREATE VIEW sp_updateFile(path, etag) AS SELECT 0, 0 WHERE 0; CREATE TRIGGER sp_updateFile_t INSTEAD OF INSERT ON sp_updateFile BEGIN INSERT INTO t_File (path, etag) VALUES (NEW.path, NEW.etag) ON CONFLICT (path) DO UPDATE SET etag = NEW.etag; END; DELETE FROM t_FileContent WHERE id IN ( SELECT id FROM t_File WHERE etag = \'updating\' ); DELETE FROM t_File WHERE etag = \'updating\'; COMMIT;
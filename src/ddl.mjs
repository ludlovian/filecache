export const ddl =
  'PRAGMA journal_mode=WAL; PRAGMA foreign_keys=ON; BEGIN TRANSACTION; CREATE TABLE IF NOT EXISTS t_File ( id INTEGER PRIMARY KEY, path TEXT NOT NULL UNIQUE, status INT NOT NULL, mtime INT, size INT, ctype TEXT ); CREATE TABLE IF NOT EXISTS t_FileContent ( id INTEGER NOT NULL, ix INTEGER NOT NULL, data BLOB NOT NULL, PRIMARY KEY (id, ix), FOREIGN KEY (id) REFERENCES t_File(id) ON DELETE CASCADE ); DROP VIEW IF EXISTS vw_File; CREATE VIEW vw_File AS SELECT path, status, mtime, size, ctype FROM t_File; DROP VIEW IF EXISTS vw_FileContent; CREATE VIEW vw_FileContent (data, path, ix) AS SELECT c.data, f.path, c.ix FROM t_File f JOIN t_FileContent c ON f.id = c.id ORDER BY f.path, c.ix; DROP VIEW IF EXISTS sp_removeFile; CREATE VIEW sp_removeFile(path) AS SELECT 0 WHERE 0; CREATE TRIGGER sp_removeFile_t INSTEAD OF INSERT ON sp_removeFile BEGIN DELETE FROM t_File WHERE path = NEW.path; END; DROP VIEW IF EXISTS sp_addFilePart; CREATE VIEW sp_addFilePart(path, data) AS SELECT 0, 0 WHERE 0; CREATE TRIGGER sp_addFilePart_t INSTEAD OF INSERT ON sp_addFilePart BEGIN INSERT OR IGNORE INTO t_File (path) VALUES (NEW.path); UPDATE t_File SET status = 2 WHERE path = NEW.path AND status != 2; INSERT INTO t_FileContent (id, ix, data) SELECT f.id, 1 + IFNULL(MAX(c.ix), 0), NEW.data FROM t_file f LEFT JOIN t_FileContent c ON c.id = f.id WHERE f.path = NEW.path; END; DROP VIEW IF EXISTS sp_updateFile; CREATE VIEW sp_updateFile(path, status, mtime, size, ctype) AS SELECT 0, 0, 0, 0, 0 WHERE 0; CREATE TRIGGER sp_updateFile_t INSTEAD OF INSERT ON sp_updateFile BEGIN INSERT INTO t_File ( path, status, mtime, size, ctype ) VALUES ( NEW.path, NEW.status, NEW.mtime, NEW.size, NEW.ctype ) ON CONFLICT (path) DO UPDATE SET (status, mtime, size, ctype) = (NEW.status, NEW.mtime, NEW.size, NEW.ctype); END; DROP VIEW IF EXISTS sp_reset; CREATE VIEW sp_reset(unused) AS SELECT 0 WHERE 0; CREATE TRIGGER sp_reset_t INSTEAD OF INSERT ON sp_reset BEGIN DELETE FROM t_File; END; DELETE FROM t_File WHERE status = 2; COMMIT; VACUUM;'
